/**
 * ffi.du
 *
 * Testing the ffi api

Used c code start:

#include <dictu_ffi_include.h>

Value dictu_ffi_test(DictuVM *vm, int argCount, Value *args) {
    if(argCount != 2 || !IS_NUMBER(args[0]) || !IS_NUMBER(args[1])){
        return NIL_VAL;
    }
    double a = AS_NUMBER(args[0]);
    double b = AS_NUMBER(args[1]);
    return NUMBER_VAL(a+b);
}
Value dictu_ffi_test_str(DictuVM *vm, int argCount, Value *args) {
    return OBJ_VAL(copyString(vm, "Hello From Dictu FFI module!", 28));
}

int dictu_ffi_init(DictuVM *vm, Table *method_table) {
  defineNative(vm, method_table, "dictuFFITestAdd", dictu_ffi_test);
  defineNative(vm, method_table, "dictuFFITestStr", dictu_ffi_test_str);
  defineNativeProperty(
    vm, method_table, "test",
        OBJ_VAL(copyString(vm, "Dictu!", 6)));
  return 0;
}

Used c code end
*/

import System;

from UnitTest import UnitTest;
import FFI;
import Path;

class TestFFIModule < UnitTest {
    var mod = nil;
    setUp() {
        if(this.mod != nil)
            return;
        const parts = ["examples", "ffi-example", "build"];
        if(System.platform == "windows"){
            parts.push("Debug");
            parts.push("ffi-test.dll");
        } else {
            parts.push("libffi-test{}".format(FFI.suffix));
        }

        const path = Path.join(parts);
        this.mod = FFI.load(path);
    }
    testFFIModule() {
        const mod = this.mod;
        this.assertEquals(mod.test, "Dictu!");
        for(var i = 0; i < 40; i+=2) {
            this.assertEquals(mod.dictuFFITestAdd(i, i), i+i);
        }
        this.assertEquals(mod.dictuFFITestStr(), "Hello From Dictu FFI module!");
    }
    testFFIModuleCallback() {
        const mod = this.mod;
        var count = 0;
        const list = [];
        def callback(value){
            count += value;
            list.push(value);
            return value * value;
        }
        def greet(name) {
            return "Hello, {}!".format(name);
        }
        for(var i = 0; i < 5; i+=1){
            this.assertEquals(mod.dictuFFITestCallback(callback, i * i), i * i * i * i);
        }
        // 1, 4, 9, 16
        this.assertEquals(list, [0,1,4,9,16]);
        this.assertEquals(count,  1 + 4 + 9 + 16);
        this.assertEquals(mod.dictuFFITestCallback(greet, "World"), "Hello, World!");
    }
}

TestFFIModule().run();
